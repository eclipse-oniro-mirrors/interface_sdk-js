/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License"),
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file
 * @kit ArkUI
 */

import { memo } from './arkui/stateManagement/runtime'

/**
* Describe the options for the ParallelizeUI.
*
* @interface ParallelOption
* @syscap SystemCapability.ArkUI.ArkUI.Full
* @since 20 static
*/
export interface ParallelOption {
	/**
	* Whether ParallelizeUI create is enabled.
	*
	* @type { ?boolean }
	* @syscap SystemCapability.ArkUI.ArkUI.Full
	* @since 20 static
	*/
	enable?: boolean,
}

/**
 * Define the constructor of ParallelizeUI.
 * 
 * @param { ParallelOption | undefined } [options] - ParallelizeUI Option
 * @param { () => void } [content_] - Parallel creation of content
 * @syscap SystemCapability.ArkUI.ArkUI.Full
 * @since 20 static
 */
@memo
export declare function ParallelizeUI(
  options: ParallelOption | undefined,
  @memo
  content_: () => void,
): void

/**
 * Define the constructor of ParallelizeUI.
 *
 * @param { ParallelOption | undefined } [options] - ParallelizeUI Option
 * @param { () => T } [param] - ParallelizeUI parameter
 * @param { (param: T) => void } [content_] - Parallel creation of content
 * @syscap SystemCapability.ArkUI.ArkUI.Full
 * @since 20 static
 */
@memo
export declare function ParallelizeUI<T>(
  options: ParallelOption | undefined,
  param: () => T,
  @memo
  content_: (param: T) => void,
): void

/**
 * Define the constructor of ParallelizeUI for loop-based item creation.
 *
 * @param { ParallelOption | undefined } [options] - ParallelizeUI Option
 * @param { Array<V> } [arr] - The array collection to be used in UI
 * @param { (item: V, index: int) => T } [param] - Define item generator function
 * @param { (param: T) => void } [content_] - Parallel creation of content
 * @syscap SystemCapability.ArkUI.ArkUI.Full
 * @since 22 static
 */
@memo
export declare function ParallelizeUI<V, T>(
  options: ParallelOption | undefined,
  arr: Array<V>,
  param: (item: V, index: int) => T,
  @memo
  content_: (param: T) => void
): void
