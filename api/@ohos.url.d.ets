/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use static';
/**
 * @file
 * @kit ArkTS
 * @arkts >= 1.2
 */

/**
 * The url module provides utilities for URL resolution and parsing.
 *
 * @namespace url
 * @syscap SystemCapability.Utils.Lang
 * @crossplatform
 * @atomicservice
 * @since 20
 */
declare namespace url {

    /**
     * The URLParams interface defines some practical methods to process URL query strings.
     *
     * @syscap SystemCapability.Utils.Lang
     * @crossplatform
     * @atomicservice
     * @since 20
     * @name URLParams
     */
    class URLParams {
        /**
         * A parameterized constructor used to create an URLParams instance.
         * As the input parameter of the constructor function, init supports four types.
         * The input parameter is a character string two-dimensional array.
         * The input parameter is the object list.
         * The input parameter is a character string.
         * The input parameter is the URLParams object.
         *
         * @param { string[][] | Record<string, string> | string | URLParams } [init] - init init
         * @throws { BusinessError } 10200002 - Parameter error. Parameter verification failed.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        constructor(init?: [string, string][] | Record<string, string> | string | URLParams);

        /**
     * Appends a specified key/value pair as a new search parameter.
     *
     * @param { string } name - name name Key name of the search parameter to be inserted.
     * @param { string } value - value value Values of search parameters to be inserted.
     * @syscap SystemCapability.Utils.Lang
     * @crossplatform
     * @atomicservice
     * @since 20
     */
        append(name: string, value: string): void;

        /**
        * Deletes the given search parameter and its associated value,from the list of all search parameters.
        *
        * @param { string } name - name name Name of the key-value pair to be deleted.
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        delete(name: string): void;

        /**
        * Returns all key-value pairs associated with a given search parameter as an array.
        *
        * @param { string } name - name name Specifies the name of a key value.
        * @returns { Array<string> } Array<string> Returns all key-value pairs with the specified name.
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        getAll(name: string): Array<string>;

        /**
         * Returns an ES6 iterator. Each item of the iterator is a JavaScript Array.
         * The first item of Array is name, and the second item of Array is value.
         *
         * @returns { EntryIterator } Returns an iterator over all values.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        entries(): EntryIterator;

        /**
         * Callback functions are used to traverse key-value pairs on the URLParams instance object.
         *
         * @param { function } callbackFn - callbackFn value Current traversal key value,
            * key Indicates the name of the key that is traversed.
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        forEach(callbackFn: (value: string, key: string, searchParams: URLParams) => void): void;

        /**
         * Returns the first value associated to the given search parameter.
         *
         * @param { string } name - name name Specifies the name of a key-value pair.
         * @returns { string | undefined } Returns the first value found by name. 
         * If no value is found, undefined is returned.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get(name: string): string | undefined;

        /**
         * Returns a Boolean that indicates whether a parameter with the specified name exists.
         *
         * @param { string } name - name name Specifies the name of a key-value pair.
         * @returns { boolean } Returns a Boolean value that indicates whether a found
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        has(name: string): boolean;

        /**
         * Sets the value associated with a given search parameter to the
         * given value. If there were several matching values, this method
         * deletes the others. If the search parameter doesn't exist, this
         * method creates it.
         *
         * @param { string } name - name name Key name of the parameter to be set.
         * @param { string } value - value value Indicates the parameter value to be set.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        set(name: string, value: string): void;

        /**
         * Sort all key/value pairs contained in this object in place and return undefined.
         *
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        sort(): void;

        /**
         * Returns an iterator allowing to go through all keys contained in this object.
         *
         * @returns { KeyValueIterator } Returns an ES6 Iterator over the names of each name-value pair.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        keys(): KeyValueIterator;

        /**
         * Returns an iterator allowing to go through all values contained in this object.
         *
         * @returns { KeyValueIterator } Returns an ES6 Iterator over the values of each name-value pair.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        values(): KeyValueIterator;

        /**
         * Returns an iterator allowing to go through all key/value
         * pairs contained in this object.
         *
         * @returns { EntryIterator } Returns an ES6 iterator.
         * Each item of the iterator is a JavaScript Array.
         * The first item of Array is name, and the second item of Array is value.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        $_iterator(): EntryIterator;

        /**
         * Returns a query string suitable for use in a URL.
         *
         * @returns { string } Returns a search parameter serialized as a string, percent-encoded if necessary.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        toString(): string;
    }

    /**
     * The interface of URL is used to parse, construct, normalize, and encode URLs.
     *
     * @syscap SystemCapability.Utils.Lang
     * @crossplatform
     * @atomicservice
     * @since 20
     * @name URL
     */
    class URL {
        /**
         * URL constructor, which is used to instantiate a URL object.
         *
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        constructor();

        /**
         * Replaces the original constructor to process arguments and return a url object.
         *
         * @param { string } url - url url Absolute or relative input URL to resolve. 
         * Base is required if input is relative.
         * If input is an absolute value, base ignores the value.
         * @param { string | URL } [base] - base base Base URL to parse if input is not absolute.
         * @returns { URL }
         * @throws { BusinessError } 10200002 - Invalid url string.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        static parseURL(url: string, base?: string | URL): URL;

        /**
         * Returns the serialized URL as a string.
         *
         * @returns { string } Returns the serialized URL as a string.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        toString(): string;

        /**
         * Returns the serialized URL as a string.
         *
         * @returns { string } Returns the serialized URL as a string.
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        toJSON(): string;

        /**
         * Gets and sets the fragment portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get hash(): string;

        /**
         * Gets and sets the fragment portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        set hash(hash: string);

        /**
         * Gets and sets the host portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get host(): string;

        /**
        * Gets and sets the host portion of the URL.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set host(host: string);

        /**
         * Gets and sets the host name portion of the URL，not include the port.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get hostname(): string;

        /**
        * Gets and sets the host name portion of the URL，not include the port.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set hostname(hostname: string);

        /**
         * Gets and sets the serialized URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get href(): string;

        /**
         * Gets and sets the serialized URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        set href(href: string);

        /**
         * Gets the read-only serialization of the URL's origin.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get origin(): string;

        /**
         * Gets and sets the password portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get password(): string;

        /**
         * Gets and sets the password portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        set password(password: string);

        /**
         * Gets and sets the path portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get pathname(): string;

        /**
        * Gets and sets the path portion of the URL.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set pathname(pathname: string);

        /**
         * Gets and sets the port portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get port(): string;

        /**
        * Gets and sets the port portion of the URL.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set port(port: string);

        /**
         * Gets and sets the protocol portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get protocol(): string;

        /**
        * Gets and sets the protocol portion of the URL.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set protocol(protocol: string);

        /**
         * Gets and sets the serialized query portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get search(): string;

        /**
       * Gets and sets the serialized query portion of the URL.
       *
       * @type { string }
       * @syscap SystemCapability.Utils.Lang
       * @crossplatform
       * @atomicservice
       * @since 20
       */
        set search(search: string);
        /**
         * Gets the URLParams object that represents the URL query parameter.
         * This property is read-only, but URLParams provides an object that can be used to change
         * the URL instance. To replace the entire query parameter for a URL, use url.searchsetter.
         *
         * @type { URLParams }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get params(): URLParams;

        /**
         * Gets and sets the username portion of the URL.
         *
         * @type { string }
         * @syscap SystemCapability.Utils.Lang
         * @crossplatform
         * @atomicservice
         * @since 20
         */
        get username(): string;

        /**
        * Gets and sets the username portion of the URL.
        *
        * @type { string }
        * @syscap SystemCapability.Utils.Lang
        * @crossplatform
        * @atomicservice
        * @since 20
        */
        set username(username: string);
    }

    class EntryIterator implements Iterator<Array<string>> {
        next(): IteratorResult<Array<string>>;
        $_iterator(): EntryIterator;
    }

    class KeyValueIterator implements Iterator<string> {
        next(): IteratorResult<string>;
        $_iterator(): KeyValueIterator;
    }
}
export default url;
